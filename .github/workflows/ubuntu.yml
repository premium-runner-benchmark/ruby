name: Ubuntu
on: [push, pull_request]
jobs:
  make:
    strategy:
      matrix:
        test_task: ["check"]
        runner_type: [ds2v2,ds2v3,ds3v2,ds4v2,ds5v2,f32s,f64s,m5large,m5dlarge]
        #os: [ds2v2,ds2v3,ds3v2,ds4v2,ds5v2,f32s,f64s,m5large,m5dlarge,n2s2,ubuntu-20.04]
        debug: ["-DRUBY_DEBUG"]
      fail-fast: false
    
    env:
      #### For stat collection
      runId: ${{ matrix.runner_type }}-${{ github.workflow }}
      artifactsDir: artifacts/${{ github.repository }}
      iostatFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-iostat.txt
      vmstatFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-vmstat.txt
      timingFile: artifacts/${{ github.repository }}/${{ matrix.runner_type }}-timing.txt
      ##########################
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
      RUBY_DEBUG: ci
    runs-on: ${{ matrix.runner_type }}
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    
    steps:
      #### Start stat collection
      - run: mkdir -p ${{ runner.temp }}/${{ env.artifactsDir }}
      - run: iostat -yxmt 1 > ${{ runner.temp }}/${{ env.iostatFile }} &
      - run: vmstat -n 1 > ${{ runner.temp }}/${{ env.vmstatFile }} &
      - run: date -R > ${{ runner.temp }}/${{ env.timingFile }}
      ##########################
      - run: mkdir -p build
        working-directory:
      - name: Install libraries
        run: |
          set -x
          sudo apt-get update -q || :
          sudo apt-get install --no-install-recommends -q -y build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev bison autoconf ruby
      - name: git config
        run: |
          git config --global advice.detachedHead 0
      - uses: actions/checkout@v2
        with:
          path: src
      #- name: Fixed world writable dirs
      #  run: |
      #    chmod -v go-w $HOME $HOME/.config
      #    sudo chmod -R go-w /usr/share
      #    sudo bash -c 'IFS=:; for d in '"$PATH"'; do chmod -v go-w $d; done' || :
      - name: Set ENV
        run: |
          echo "JOBS=-j$((1 + $(nproc --all)))" >> $GITHUB_ENV
      - run: autoconf
        working-directory: src
      - name: Run configure
        run: ../src/configure -C --disable-install-doc cppflags=${{ matrix.debug }}
      - run: make $JOBS incs
      - run: make $JOBS
      - run: make prepare-gems
        if: matrix.test_task == 'check'
      - name: Create dummy files in build dir
        run: |
          ./miniruby -e '(("a".."z").to_a+("A".."Z").to_a+("0".."9").to_a+%w[foo bar test zzz]).each{|basename|File.write("#{basename}.rb", "raise %(do not load #{basename}.rb)")}'
        if: matrix.test_task == 'check'
      - run: make $JOBS -s ${{ matrix.test_task }}
        timeout-minutes: 30
        env:
          RUBY_TESTOPTS: "-q --tty=no"
          TEST_BUNDLED_GEMS_ALLOW_FAILURES: ""
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "${{ matrix.os }} / ${{ matrix.test_task }}${{ matrix.debug }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: failure() && github.event_name == 'push'

      #### Collect/upload stats
      - run: date -R >> ${{ runner.temp }}/${{ env.timingFile }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: perfdata
          path: ${{ runner.temp }}/${{ env.artifactsDir }}
          if-no-files-found: error
      ##########################

  process:
    name: Process Perf Data
    runs-on: ubuntu-latest
    needs: [make]
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: x64
      - uses: actions/checkout@v2
        with:
          repository: pjquirk/runnerperf
          path: runnerperf
      - uses: actions/checkout@v2
        with:
          repository: pjquirk/iostat-tool
          path: runnerperf/iostat-tool
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2  
        with:
          name: perfdata
          path: runnerperf/data
      - name: Prereqs
        run: sudo apt -y install datamash  
      - name: Process stats
        run: |
          cd runnerperf
          (cd iostat-tool && python setup.py develop)
          ls -l data
          script/dumpcsv.sh data output
          script/aggregate.sh output ${{ github.repository }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: summary-perfdata
          path: runnerperf/output/summary.csv
          if-no-files-found: error


defaults:
  run:
    working-directory: build

  

